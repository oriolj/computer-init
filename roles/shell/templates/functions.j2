# {{ ansible_managed }}

# Create a directory and cd into it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Extract archives
extract() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"   ;;
            *.tar.gz)    tar xzf "$1"   ;;
            *.bz2)       bunzip2 "$1"   ;;
            *.rar)       unrar x "$1"   ;;
            *.gz)        gunzip "$1"    ;;
            *.tar)       tar xf "$1"    ;;
            *.tbz2)      tar xjf "$1"   ;;
            *.tgz)       tar xzf "$1"   ;;
            *.zip)       unzip "$1"     ;;
            *.Z)         uncompress "$1";;
            *.7z)        7z x "$1"      ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Find files by name
ff() {
    find . -type f -iname "*$1*"
}

# Find directories by name
fd() {
    find . -type d -iname "*$1*"
}

# Search in files
fif() {
    if [ ! "$#" -gt 0 ]; then
        echo "Usage: fif <search_term>"
        return 1
    fi
    grep -rnw . -e "$1" 2>/dev/null
}

# Create a backup of a file
backup() {
    if [ -f "$1" ]; then
        cp "$1" "$1.bak.$(date +%Y%m%d_%H%M%S)"
        echo "Backup created: $1.bak.$(date +%Y%m%d_%H%M%S)"
    else
        echo "File not found: $1"
    fi
}

# Show disk usage for current directory
ducks() {
    du -cks * | sort -rn | head -n "${1:-10}"
}

# Show most used commands
histop() {
    history | awk '{print $2}' | sort | uniq -c | sort -rn | head -"${1:-10}"
}

# Git clone and cd into directory
gclone() {
    git clone "$1" && cd "$(basename "$1" .git)"
}

# Docker shell access
dsh() {
    docker exec -it "$1" /bin/bash || docker exec -it "$1" /bin/sh
}

# Kill process by port
killport() {
    if [ -z "$1" ]; then
        echo "Usage: killport <port>"
        return 1
    fi
    lsof -ti :"$1" | xargs kill -9
}

# Weather in terminal
wttr() {
    curl -s "wttr.in/${1:-}"
}

# Create a Python virtual environment and activate it
mkvenv() {
    python3 -m venv "${1:-venv}" && source "${1:-venv}/bin/activate"
}

# Quick HTTP server
serve() {
    local port="${1:-8000}"
    python3 -m http.server "$port"
}

# Show PATH in readable format
path() {
    echo "$PATH" | tr ':' '\n' | nl
}

# Countdown timer
countdown() {
    local seconds="${1:-60}"
    while [ $seconds -gt 0 ]; do
        echo -ne "$seconds\033[0K\r"
        sleep 1
        : $((seconds--))
    done
    echo "Time's up!"
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Show colors available in terminal
colors() {
    for i in {0..255}; do
        print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}
    done
}

# Quick notes
note() {
    if [ -n "$1" ]; then
        echo "$(date +'%Y-%m-%d %H:%M:%S') - $*" >> "$HOME/notes.txt"
        echo "Note saved to ~/notes.txt"
    else
        cat "$HOME/notes.txt" 2>/dev/null || echo "No notes found"
    fi
}

# System information
sysinfo() {
    echo "Hostname: $(hostname)"
    echo "OS: $(uname -s) $(uname -r)"
    echo "Uptime: $(uptime -p)"
    echo "Memory: $(free -h | awk '/^Mem:/ {print $3 "/" $2}')"
    echo "CPU: $(lscpu | grep "Model name" | cut -d':' -f2 | xargs)"
    echo "Disk: $(df -h / | awk 'NR==2 {print $3 "/" $2 " (" $5 ")"}')"
}

# Update all package managers
update-all() {
    # System packages
    if command_exists apt; then
        echo "Updating APT packages..."
        sudo apt update && sudo apt upgrade -y
    elif command_exists dnf; then
        echo "Updating DNF packages..."
        sudo dnf upgrade -y
    elif command_exists pacman; then
        echo "Updating Pacman packages..."
        sudo pacman -Syu
    elif command_exists brew; then
        echo "Updating Homebrew packages..."
        brew update && brew upgrade
    fi
    
    # Language-specific package managers
    if command_exists npm; then
        echo "Updating NPM packages..."
        npm update -g
    fi
    
    if command_exists pip3; then
        echo "Updating PIP packages..."
        pip3 list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip3 install -U
    fi
    
    if command_exists rustup; then
        echo "Updating Rust..."
        rustup update
    fi
}